{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","greenMode","role","htmlFor","toggleMode","blueMode","pinkMode","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","console","log","target","backgroundColor","textcolor","rows","buttoncolor","newText","toUpperCase","showAlert","trim","length","replace","split","filter","Alert","alert","class","word","lower","toLowerCase","charAt","slice","capitalize","msg","App","setmode","_useState3","_useState4","setTextcolor","_useState5","_useState6","setbuttoncolor","_useState7","_useState8","setAlert","message","setTimeout","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6b4b4877.chunk.js","sourcesContent":["import React from 'react';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n<nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className='container-fluid'>\r\n  <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav mr-auto\">\r\n      <li className=\"nav-item active\">\r\n        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\"></span></a>\r\n      </li>\r\n      {/* <li className=\"nav-item\">\r\n        <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n      </li> */}\r\n     \r\n    </ul>\r\n    {/*\r\n    <form className=\"form-inline my-2 my-lg-0\">\r\n      <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n    </form>\r\n  */}\r\n\r\n  </div>\r\n  <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.greenMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> Green</label>\r\n</div>\r\n  <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> Grey</label>\r\n</div>\r\n\r\n<div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.blueMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> Blue</label>\r\n</div>\r\n<div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.pinkMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> Pink</label>\r\n</div>\r\n\r\n  </div>\r\n\r\n</nav>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport  { useState } from \"react\";\r\nexport default function TextForm(props) {\r\n  \r\n  \r\n    const handleUpClick=()=>{\r\n        console.log(\"Uppercase was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"On change\");\r\n        setText(event.target.value);\r\n       \r\n    }\r\n    const handleClearText=()=>{\r\n        setText(\"\");\r\n        props.showAlert(\"Cleared text\",\"success\");\r\n    }\r\n const [text, setText] = useState('Enter Text Here');\r\n\r\n  return (\r\n   \r\n <>\r\n  <div className=\"container\" style={{color: props.mode==='light'?'grey':'white'}}>\r\n    <h1>{props.heading}</h1>\r\n  <div className=\"form-group\">\r\n\r\n    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'white':props.textcolor, color:props.mode==='light'?'grey':'white'}} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n  </div>\r\n  <button className=\"btn btn-primary\" style={{backgroundColor: props.mode==='light'?'white':props.buttoncolor, color:props.mode==='light'?'grey':'white'}}  onClick={handleUpClick}>Convert to Uppercase</button>\r\n  <button className=\"btn btn-primary\" style={{backgroundColor: props.mode==='light'?'white':props.buttoncolor, color:props.mode==='light'?'grey':'white'}} onClick={handleClearText}>Clear Text</button>\r\n  </div>\r\n  <div className=\"container my-2\" style={{color: props.mode==='light'?'grey':'white'}}>\r\n    <h1 style={{color: props.mode==='light'?'grey':'white'}}>your text summary</h1>\r\n    \r\n   \r\n    <p>{text.trim().length}</p>\r\n    \r\n    <p>{text.replace(/\\n/g, \" \").split(' ').filter(value => value !== \"\").length} words</p>\r\n    <h1 style={{color: props.mode==='light'?'grey':'white'}}>preview</h1>\r\n    {text}\r\n  </div>\r\n\r\n  </> \r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n  return (\r\n  \r\nprops.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n<strong>{capitalize(props.alert.type)}    </strong>{props.alert.msg}\r\n  \r\n</div>\r\n\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","\nimport './App.css';\nimport React from 'react';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport  { useState } from \"react\";\nimport Alert from './components/Alert';\n\n\n// import {\n \n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [textcolor, setTextcolor] = useState('white');\n  const [buttoncolor, setbuttoncolor] = useState('white');\n  console.log(\"present=\",textcolor);\n  const [alert, setAlert] = useState(null);\n  const showAlert=(message,type)=>{\n    setAlert ({\n      msg:message,\n      type:type\n    })\n\n    setTimeout(()=>{\n      setAlert(null);\n    },1000)\n    \n\n  }\n  const toggleMode=()=>{\n   \n    if(mode==='light'){\n      setmode('dark')\n      document.body.style.backgroundColor='grey';\n      showAlert(\"Dark mode has been set\",\"success\");\n      setTextcolor('grey');\n    }\n    else{\n      setmode('light')\n      setbuttoncolor('black')\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been set\",\"success\");\n    }\n    \n  }\n  const greenMode=()=>{\n    console.log(\"hello i am green.........\");\n    if(mode==='light'){\n      setmode('dark')\n      document.body.style.backgroundColor='#20c997';\n      showAlert(\"Green mode has been set\",\"success\");\n      setTextcolor('#20c997');\n      setbuttoncolor('green')\n      console.log('color=',textcolor,\"mode=\",mode);\n    }\n    else{\n      setmode('light')\n      setbuttoncolor('white')\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been set\",\"success\");\n    }\n    \n  }\n\n\n  \n\n\nreturn (\n  <>\n  {/*<Router>*/}\n<Navbar title=\"TextUtils2\" mode={mode} textcolor={textcolor} toggleMode={toggleMode}  greenMode={greenMode}  />\n<Alert alert={alert}/>\n<div className=\"container\">\n{/* {<Switch>} */}\n{/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} textcolor={textcolor} buttoncolor={buttoncolor}/>\n          {/* </Route> */}\n          {/* <Route  exact path=\"/about\">\n            <About />\n          </Route> */}\n        \n    \n{/* {</Switch>} */}\n     \n        \n      \n\n\n\n{/*<About/>*/}\n</div>\n{/* </Router> */}\n</>\n);\n\n    \n\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}